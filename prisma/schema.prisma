// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String    @id @default(uuid())
  name                 String?
  email                String    @unique
  emailVerified        DateTime?
  password             String?
  image                String?
  role                 String    @default("user")
  plan                 String    @default("Starter")
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  isActive             Boolean   @default(true)
  bio                  String?
  theme                String?   @default("light")
  notificationSettings String?   @default("{}")

  accounts      Account[]
  sessions      Session[]
  contacts      Contact[]
  apiTokens     ApiToken[]
  webhooks      Webhook[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Contact {
  id          String   @id @default(uuid())
  name        String
  email       String
  phone       String?
  company     String?
  status      String   @default("lead")
  source      String   @default("website")
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ApiToken {
  id          String    @id @default(uuid())
  name        String
  token       String    @unique
  permissions String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastUsed    DateTime?
  expiresAt   DateTime?
  isActive    Boolean   @default(true)
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Webhook {
  id            String       @id @default(uuid())
  name          String
  url           String
  events        String
  active        Boolean      @default(true)
  secret        String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  lastTriggered DateTime?
  lastStatus    Int?
  userId        String
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}
