// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String    @id @default(uuid())
  name                 String?
  email                String    @unique
  emailVerified        DateTime?
  password             String?
  role                 String    @default("user")
  plan                 String    @default("Starter")
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  isActive             Boolean   @default(true)
  theme                String?   @default("light")
  notificationSettings String?   @default("{}")
  whatsappInstances    WhatsAppInstance[]
  accounts             Account[]
  sessions             Session[]
  contacts             Contact[]
  apiTokens            ApiToken[]
  webhooks             Webhook[]
  campaigns            Campaign[]
  dailyLimits          DailyLimit[]
  messageTemplates     MessageTemplate[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Contact {
  id          String   @id @default(uuid())
  name        String
  contact     String
  status      String   
  source      String   
  notes       String?
  value       Float?   @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  campaignSends CampaignSend[]
}

model ApiToken {
  id          String    @id @default(uuid())
  name        String
  token       String    @unique
  permissions String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastUsed    DateTime?
  expiresAt   DateTime?
  isActive    Boolean   @default(true)
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Webhook {
  id            String       @id @default(uuid())
  name          String
  url           String
  events        String
  active        Boolean      @default(true)
  secret        String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  lastTriggered DateTime?
  lastStatus    Int?
  userId        String
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Report {
  id              String   @id @default(uuid())
  userId          String
  format          String
  period          String
  startDate       DateTime?
  endDate         DateTime?
  includeContacts Boolean  @default(true)
  includeFinancial Boolean @default(true)
  fileName        String?
  fileUrl         String?
  createdAt       DateTime @default(now())
}

model WhatsAppInstance {
  id           String   @id @default(cuid())
  instanceName String   @unique
  status       String   @default("DISCONNECTED") // ex: CONNECTED, DISCONNECTED, QR_UPDATED, CREATED
  qrCode       String?  // QR code base64 opcional
  userId       String
  user         User     @relation(fields: [userId], references: [id])

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([instanceName, userId]) // Ensure unique instance name per user
}

model Campaign {
  id          String   @id @default(uuid())
  name        String
  message     String?  @db.Text
  messageType String   @default("text") // text, image, audio, video, document
  mediaUrl    String?  // URL for media files
  fileName    String?  // Original filename for documents
  fileSize    Int?     // File size in bytes
  mimeType    String?  // MIME type of the file
  caption     String?  @db.Text // Caption for media files
  userId      String
  instanceId  String
  status      String   @default("PENDING") // PENDING, RUNNING, COMPLETED, PAUSED, FAILED
  totalContacts Int    @default(0)
  sentCount   Int      @default(0)
  failedCount Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  scheduledAt DateTime?
  completedAt DateTime?
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  batches     CampaignBatch[]
  sends       CampaignSend[]
}

model CampaignBatch {
  id         String   @id @default(uuid())
  campaignId String
  batchNumber Int
  status     String   @default("PENDING") // PENDING, PROCESSING, COMPLETED, FAILED
  scheduledAt DateTime
  processedAt DateTime?
  contactIds String[] // Array of contact IDs for this batch
  
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  
  @@unique([campaignId, batchNumber])
}

model CampaignSend {
  id         String   @id @default(uuid())
  campaignId String
  contactId  String
  status     String   @default("PENDING") // PENDING, SENT, FAILED, DELIVERED, READ
  sentAt     DateTime?
  deliveredAt DateTime?
  readAt     DateTime?
  errorMessage String?
  messageId  String?
  mediaDelivered Boolean? @default(false) // Track if media was successfully delivered
  
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  contact    Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)
  
  @@unique([campaignId, contactId])
}

model DailyLimit {
  id        String   @id @default(uuid())
  userId    String
  date      DateTime @db.Date
  sentCount Int      @default(0)
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, date])
}

model WhatsAppMessage {
  id          String   @id @default(cuid())
  instanceId  String
  fromMe      Boolean  @default(false)
  remoteJid   String   // Phone number or group ID
  messageId   String   @unique
  messageType String   // text, image, audio, etc.
  messageText String?  @db.Text
  timestamp   DateTime @default(now())
  rawPayload  Json?    // Store the complete webhook payload
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model MessageTemplate {
  id          String   @id @default(uuid())
  name        String
  message     String?  @db.Text
  messageType String   @default("text") // text, image, audio, video, document
  mediaUrl    String?  // URL for media files
  fileName    String?  // Original filename for documents
  mimeType    String?  // MIME type of the file
  caption     String?  @db.Text // Caption for media files
  category    String   @default("Geral")
  userId      String
  usageCount  Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
