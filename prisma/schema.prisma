// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String    @id @default(uuid())
  name                 String?
  email                String    @unique
  emailVerified        DateTime?
  password             String?
  role                 String    @default("user")
  plan                 String    @default("Starter")
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  isActive             Boolean   @default(true)
  theme                String?   @default("light")
  notificationSettings String?   @default("{}")
  whatsappInstances    WhatsAppInstance[]

  accounts      Account[]
  sessions      Session[]
  contacts      Contact[]
  apiTokens     ApiToken[]
  webhooks      Webhook[]
  chatQueues    ChatQueue[]
  chatTickets   ChatTicket[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Contact {
  id          String   @id @default(uuid())
  name        String
  contact     String
  status      String   
  source      String   
  notes       String?
  value       Float?   @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Novos relacionamentos para chat
  chatTickets ChatTicket[]
  messages    WhatsAppMessage[]
}

model ApiToken {
  id          String    @id @default(uuid())
  name        String
  token       String    @unique
  permissions String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastUsed    DateTime?
  expiresAt   DateTime?
  isActive    Boolean   @default(true)
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Webhook {
  id            String       @id @default(uuid())
  name          String
  url           String
  events        String
  active        Boolean      @default(true)
  secret        String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  lastTriggered DateTime?
  lastStatus    Int?
  userId        String
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Report {
  id              String   @id @default(uuid())
  userId          String
  format          String
  period          String
  startDate       DateTime?
  endDate         DateTime?
  includeContacts Boolean  @default(true)
  includeFinancial Boolean @default(true)
  fileName        String?
  fileUrl         String?
  createdAt       DateTime @default(now())
}

model WhatsAppInstance {
  id           String   @id @default(cuid())
  instanceName String   @unique
  status       String   @default("DISCONNECTED") // ex: CONNECTED, DISCONNECTED, QR_UPDATED, CREATED
  qrCode       String?  // QR code base64 opcional
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  messages     WhatsAppMessage[]
  chatTickets  ChatTicket[]

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([instanceName, userId]) // Ensure unique instance name per user
}

model WhatsAppMessage {
  id            String   @id @default(cuid())
  instanceId    String
  instance      WhatsAppInstance @relation(fields: [instanceId], references: [id])

  fromMe        Boolean
  remoteJid     String
  messageId     String @unique
  messageType   String
  messageText   String?
  rawPayload    Json

  // Novos campos para relacionamento com contatos e tickets
  contactId     String?
  contact       Contact? @relation(fields: [contactId], references: [id], onDelete: SetNull)
  ticketId      String?
  ticket        ChatTicket? @relation(fields: [ticketId], references: [id], onDelete: SetNull)
  isRead        Boolean @default(false)
  readAt        DateTime?

  createdAt     DateTime @default(now())

  @@index([contactId])
  @@index([ticketId])
  @@index([remoteJid])
  @@index([isRead])
}

// Nova tabela para filas de atendimento
model ChatQueue {
  id          String   @id @default(uuid())
  name        String
  description String?
  color       String   @default("#3B82F6")
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tickets     ChatTicket[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
}

// Nova tabela para tickets/atendimentos
model ChatTicket {
  id            String   @id @default(uuid())
  contactId     String
  contact       Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)
  instanceId    String
  instance      WhatsAppInstance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  queueId       String
  queue         ChatQueue @relation(fields: [queueId], references: [id], onDelete: Restrict)
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  status        String   @default("NOVO") // NOVO, CONVERSANDO, INTERESSADO, FECHADO, PERDIDO
  priority      Int      @default(1) // 1=baixa, 2=m√©dia, 3=alta
  subject       String?
  lastMessageAt DateTime?
  closedAt      DateTime?
  closedBy      String?
  notes         String?
  tags          String?
  
  messages      WhatsAppMessage[]

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([contactId])
  @@index([instanceId])
  @@index([queueId])
  @@index([userId])
  @@index([status])
  @@index([lastMessageAt])
}
