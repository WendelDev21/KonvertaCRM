generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String             @id @default(uuid())
  name                 String?
  email                String             @unique
  emailVerified        DateTime?
  password             String?
  role                 String             @default("user")
  plan                 String             @default("Starter")
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  isActive             Boolean            @default(true)
  theme                String?            @default("light")
  notificationSettings String?            @default("{}")
  credits              Decimal               @default(0.00) @db.Decimal(10, 2) // New field for credits
  
  accounts             Account[]
  apiTokens            ApiToken[]
  campaigns            Campaign[]
  contacts             Contact[]
  dailyLimits          DailyLimit[]
  messageTemplates     MessageTemplate[]
  sessions             Session[]
  webhooks             Webhook[]
  whatsappInstances    WhatsAppInstance[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Contact {
  id            String         @id @default(uuid())
  name          String
  contact       String
  status        String
  source        String
  notes         String?
  value         Float?         @default(0)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  userId        String
  campaignSends CampaignSend[]
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ApiToken {
  id          String    @id @default(uuid())
  name        String
  token       String    @unique
  permissions String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastUsed    DateTime?
  expiresAt   DateTime?
  isActive    Boolean   @default(true)
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Webhook {
  id            String    @id @default(uuid())
  name          String
  url           String
  events        String
  active        Boolean   @default(true)
  secret        String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastTriggered DateTime?
  lastStatus    Int?
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Report {
  id               String    @id @default(uuid())
  userId           String
  format           String
  period           String
  startDate        DateTime?
  endDate          DateTime?
  includeContacts  Boolean   @default(true)
  includeFinancial Boolean   @default(true)
  fileName         String?
  fileUrl          String?
  createdAt        DateTime  @default(now())
}

model WhatsAppInstance {
  id           String   @id @default(cuid())
  instanceName String   @unique
  status       String   @default("DISCONNECTED")
  qrCode       String?
  userId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])

  @@unique([instanceName, userId])
}

model Campaign {
  id            String          @id @default(uuid())
  name          String
  message       String?
  userId        String
  instanceId    String
  status        String          @default("PENDING")
  totalContacts Int             @default(0)
  sentCount     Int             @default(0)
  failedCount   Int             @default(0)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  scheduledAt   DateTime?
  completedAt   DateTime?
  caption       String?
  fileName      String?
  fileSize      Int?
  mediaUrl      String?
  messageType   String          @default("text")
  mimeType      String?
  mediaType     String?
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  batches       CampaignBatch[]
  sends         CampaignSend[]

  @@index([mediaType])
}

model CampaignBatch {
  id          String    @id @default(uuid())
  campaignId  String
  batchNumber Int
  status      String    @default("PENDING")
  scheduledAt DateTime
  processedAt DateTime?
  contactIds  String[]
  campaign    Campaign  @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@unique([campaignId, batchNumber])
}

model CampaignSend {
  id             String    @id @default(uuid())
  campaignId     String
  contactId      String
  status         String    @default("PENDING")
  sentAt         DateTime?
  errorMessage   String?
  messageId      String?
  deliveredAt    DateTime?
  mediaDelivered Boolean?  @default(false)
  readAt         DateTime?
  campaign       Campaign  @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  contact        Contact   @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@unique([campaignId, contactId])
}

model DailyLimit {
  id        String   @id @default(uuid())
  userId    String
  date      DateTime @db.Date
  sentCount Int      @default(0)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
}

model WhatsAppMessage {
  id          String   @id @default(cuid())
  instanceId  String
  fromMe      Boolean  @default(false)
  remoteJid   String
  messageId   String   @unique
  messageType String
  messageText String?
  rawPayload  Json?
  createdAt   DateTime @default(now())
  timestamp   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model MessageTemplate {
  id          String   @id @default(uuid())
  name        String
  message     String?
  category    String   @default("Geral")
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  usageCount  Int      @default(0)
  caption     String?
  fileName    String?
  mediaUrl    String?
  messageType String   @default("text")
  mimeType    String?
  mediaType   String?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([mediaType])
}
